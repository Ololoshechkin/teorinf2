package jpeg

import java.io.File

val INITIAL_DHT = DefineHuffmanTableSegment.read(
    1,
    2,
    byteArrayOf(
        -1,
        -60,
        1,
        -94,
        0,
        0,
        1,
        5,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        16,
        0,
        2,
        1,
        3,
        3,
        2,
        4,
        3,
        5,
        5,
        4,
        4,
        0,
        0,
        1,
        125,
        1,
        2,
        3,
        0,
        4,
        17,
        5,
        18,
        33,
        49,
        65,
        6,
        19,
        81,
        97,
        7,
        34,
        113,
        20,
        50,
        -127,
        -111,
        -95,
        8,
        35,
        66,
        -79,
        -63,
        21,
        82,
        -47,
        -16,
        36,
        51,
        98,
        114,
        -126,
        9,
        10,
        22,
        23,
        24,
        25,
        26,
        37,
        38,
        39,
        40,
        41,
        42,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        -125,
        -124,
        -123,
        -122,
        -121,
        -120,
        -119,
        -118,
        -110,
        -109,
        -108,
        -107,
        -106,
        -105,
        -104,
        -103,
        -102,
        -94,
        -93,
        -92,
        -91,
        -90,
        -89,
        -88,
        -87,
        -86,
        -78,
        -77,
        -76,
        -75,
        -74,
        -73,
        -72,
        -71,
        -70,
        -62,
        -61,
        -60,
        -59,
        -58,
        -57,
        -56,
        -55,
        -54,
        -46,
        -45,
        -44,
        -43,
        -42,
        -41,
        -40,
        -39,
        -38,
        -31,
        -30,
        -29,
        -28,
        -27,
        -26,
        -25,
        -24,
        -23,
        -22,
        -15,
        -14,
        -13,
        -12,
        -11,
        -10,
        -9,
        -8,
        -7,
        -6,
        1,
        0,
        3,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        17,
        0,
        2,
        1,
        2,
        4,
        4,
        3,
        4,
        7,
        5,
        4,
        4,
        0,
        1,
        2,
        119,
        0,
        1,
        2,
        3,
        17,
        4,
        5,
        33,
        49,
        6,
        18,
        65,
        81,
        7,
        97,
        113,
        19,
        34,
        50,
        -127,
        8,
        20,
        66,
        -111,
        -95,
        -79,
        -63,
        9,
        35,
        51,
        82,
        -16,
        21,
        98,
        114,
        -47,
        10,
        22,
        36,
        52,
        -31,
        37,
        -15,
        23,
        24,
        25,
        26,
        38,
        39,
        40,
        41,
        42,
        53,
        54,
        55,
        56,
        57,
        58,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        -126,
        -125,
        -124,
        -123,
        -122,
        -121,
        -120,
        -119,
        -118,
        -110,
        -109,
        -108,
        -107,
        -106,
        -105,
        -104,
        -103,
        -102,
        -94,
        -93,
        -92,
        -91,
        -90,
        -89,
        -88,
        -87,
        -86,
        -78,
        -77,
        -76,
        -75,
        -74,
        -73,
        -72,
        -71,
        -70,
        -62,
        -61,
        -60,
        -59,
        -58,
        -57,
        -56,
        -55,
        -54,
        -46,
        -45,
        -44,
        -43,
        -42,
        -41,
        -40,
        -39,
        -38,
        -30,
        -29,
        -28,
        -27,
        -26,
        -25,
        -24,
        -23,
        -22,
        -14,
        -13,
        -12,
        -11,
        -10,
        -9,
        -8,
        -7,
        -6
    ),
    ::DefineHuffmanTableSegment
).second

fun readJpeg(
    bytes0: ByteArray,
    initDHT: (Int, Int, ByteArray) -> DefineHuffmanTableSegment,
    withInitialDHT: Boolean = false,
    decompress: (ByteArray) -> ByteArray = { it }
): Segments {

    val bytes = decompress(bytes0)

    var i = 2

    var initialDHT: DefineHuffmanTableSegment? = null

    if (withInitialDHT) {
        initialDHT = INITIAL_DHT//DefineHuffmanTableSegment(1, payload.size, payload.drop(2).toByteArray())
    }

    var imageSegment: ImageSegment? = null
    var commentSegment: CommentSegment? = null
    var dqtSegment: DqtSegment? = null
    var startOfFrameSegment: StartOfFrameSegment? = null
    var defineHuffmanTableSegment: DefineHuffmanTableSegment? = null
    var startOfScanSegment: StartOfScanSegment? = null
    var data: ByteArray? = null

    while (i < bytes.size - 2) {
        var cntFF = 0
        while (bytes[i] == 0xFF.toByte()) {
            i++
            cntFF++
        }
        if (cntFF != 1) {
            println("     cntFF: $cntFF")
        }
        val marker = Pair(0xFF.toByte(), bytes[i++])

        when (marker) {
            ImageSegment.MARKER -> {
                val (pos, segment) = ImageSegment.read(cntFF, i, bytes)
                i = pos
                imageSegment = segment
            }
            CommentSegment.MARKER -> {
                val (pos, segment) = CommentSegment.read(cntFF, i, bytes)
                i = pos
                commentSegment = segment
            }
            DqtSegment.MARKER -> {
                val (pos, segment) = DqtSegment.read(cntFF, i, bytes)
                i = pos
                dqtSegment = segment
            }
            StartOfFrameSegment.MARKER -> {
                val (pos, segment) = StartOfFrameSegment.read(cntFF, i, bytes)
                i = pos
                startOfFrameSegment = segment
            }
            DefineHuffmanTableSegment.MARKER -> {
                val (pos, segment) = DefineHuffmanTableSegment.read(cntFF, i, bytes, initDHT)
                i = pos
                defineHuffmanTableSegment = segment
            }
            StartOfScanSegment.MARKER -> {
                val (pos, segment) = StartOfScanSegment.read(cntFF, i, bytes)
                i = pos
                startOfScanSegment = segment

                data = bytes.copyOfRange(i, bytes.size - 2)
                break
            }
        }
    }

    return Segments(
        imageSegment,
        commentSegment,
        dqtSegment,
        startOfFrameSegment!!,
        defineHuffmanTableSegment!!,
        startOfScanSegment!!,
        data!!,
        initialDHT
    )
}

fun writeJpeg(segments: Segments, compress: (ByteArray) -> ByteArray = { it }): ByteArray {
    val prefix = mutableListOf<Byte>()
    prefix.addAll(listOf(0xFF.toByte(), 0xD8.toByte()))
    segments.imageSegment?.write()?.toList()?.let(prefix::addAll)
    segments.imageSegment?.write()?.toList()?.let(prefix::addAll)
    segments.commentSegment?.write()?.toList()?.let(prefix::addAll)
    segments.dqtSegment?.write()?.toList()?.let(prefix::addAll)
    segments.startOfFrameSegment.write().toList().let(prefix::addAll)
    segments.defineHuffmanTableSegment.write().toList().let(prefix::addAll)
    segments.startOfScanSegment.write().toList().let(prefix::addAll)

    return compress(prefix.toByteArray()) + segments.data + byteArrayOf((0xFF).toByte(), (0xD9).toByte())
}